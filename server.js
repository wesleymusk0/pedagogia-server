const express = require('express');
const http = require('http');
const { Server } = require('socket.io');
const { Client, LocalAuth } = require('whatsapp-web.js');
const QRCode = require('qrcode');
const fs = require('fs');
const path = require('path');
const cors = require('cors');

const app = express();
const server = http.createServer(app);
const io = new Server(server, {
    cors: { origin: '*', methods: ['GET', 'POST'] }
});

app.use(cors());
app.use(express.json({ limit: '10mb' }));

const PORT = process.env.PORT || 10000;
const SESSIONS_DIR = path.join(__dirname, 'sessions');
if (!fs.existsSync(SESSIONS_DIR)) fs.mkdirSync(SESSIONS_DIR);

// Objeto para rastrear os clientes ativos por schoolId
const clients = {};

// Cria estrutura de diret√≥rio local para a sess√£o
function ensureSessionDir(schoolId) {
    const authPath = path.join(SESSIONS_DIR, schoolId);
    fs.mkdirSync(authPath, { recursive: true });
}

// Caminho do arquivo de autentica√ß√£o dentro da pasta de sess√£o
// whatsapp-web.js cria uma pasta "Default" dentro do dataPath
function getSessionPath(schoolId) {
    return path.join(SESSIONS_DIR, schoolId);
}

// Verifica se o cliente est√° realmente conectado ao WhatsApp
function verificarConexao(client) {
    // A verifica√ß√£o mais confi√°vel √© ver se o cliente tem um 'wid' (WhatsApp ID)
    return !!(client && client.info && client.info.wid);
}

// Fun√ß√£o para iniciar uma nova sess√£o ou reconectar
function iniciarSessao(schoolId, socket) {
    console.log(`üöÄ Iniciando sess√£o para ${schoolId}`);
    
    const authPath = getSessionPath(schoolId);
    ensureSessionDir(schoolId);

    const client = new Client({
        authStrategy: new LocalAuth({ dataPath: authPath }),
        puppeteer: { 
            headless: true, 
            args: [
                '--no-sandbox',
                '--disable-setuid-sandbox',
                '--disable-dev-shm-usage',
                '--disable-accelerated-2d-canvas',
                '--no-first-run',
                '--no-zygote',
                '--single-process', // <- pode ajudar em ambientes com pouca mem√≥ria
                '--disable-gpu'
            ]
        }
    });

    // Armazena o cliente rec√©m-criado no nosso objeto de rastreamento
    clients[schoolId] = client;

    client.on('qr', async qr => {
        console.log(`üì≤ QR gerado para ${schoolId}`);
        try {
            const qrCode = await QRCode.toDataURL(qr);
            socket.emit('qr', qrCode); // Envia o QR para o socket correto
        } catch (err) {
            console.error(`Erro ao gerar QR Code para ${schoolId}:`, err);
        }
    });

    client.on('ready', () => {
        console.log(`‚úÖ WhatsApp pronto para ${schoolId}`);
        socket.emit('ready');
    });

    client.on('authenticated', () => {
        console.log(`üîê ${schoolId} autenticado`);
    });

    client.on('disconnected', (reason) => {
        console.log(`‚ùå ${schoolId} desconectado. Motivo:`, reason);
        socket.emit('disconnected');
        // Limpa o cliente da mem√≥ria ap√≥s a desconex√£o
        if (clients[schoolId]) {
            delete clients[schoolId];
        }
    });

    client.initialize().catch(err => {
        console.error(`Falha ao inicializar cliente para ${schoolId}:`, err);
    });
}

// Fun√ß√£o para verificar se a sess√£o local existe
async function verificarSessaoLocal(schoolId, socket) {
    console.log(`üì• Verificando sess√£o local para ${schoolId}...`);
    const sessionDir = getSessionPath(schoolId);
    
    // O whatsapp-web.js cria uma pasta 'Default' se a sess√£o existe
    const sessionExists = fs.existsSync(path.join(sessionDir, 'Default'));

    if (!sessionExists) {
        console.log(`üì≠ Sess√£o n√£o encontrada para ${schoolId}. Gerando QR...`);
    } else {
        console.log(`üìÅ Sess√£o encontrada para ${schoolId}. Tentando conectar...`);
    }

    iniciarSessao(schoolId, socket);
}

// Gerenciamento da conex√£o via WebSocket
io.on('connection', socket => {
    console.log('üîó Socket conectado:', socket.id);

    socket.on('iniciar-sessao', async (schoolId) => {
        console.log(`üß† Socket [${socket.id}] pediu in√≠cio da sess√£o: ${schoolId}`);
        if (!schoolId) {
            console.log('‚ùå School ID ausente!');
            return;
        }

        // --- IN√çCIO DA CORRE√á√ÉO ---
        // Verifica se j√° existe um cliente para este schoolId (de uma conex√£o anterior/zumbi)
        if (clients[schoolId]) {
            console.log(`üëª Encontrado cliente existente para ${schoolId}. Destruindo...`);
            try {
                // .destroy() encerra a inst√¢ncia do puppeteer e limpa os recursos
                await clients[schoolId].destroy();
                console.log(`‚úÖ Cliente antigo para ${schoolId} destru√≠do.`);
            } catch (e) {
                console.error(`‚ö†Ô∏è Erro ao destruir cliente antigo para ${schoolId}:`, e.message);
            }
            delete clients[schoolId]; // Remove do nosso objeto de rastreamento
        }
        // --- FIM DA CORRE√á√ÉO ---

        // Agora, com o ambiente limpo, procede com a cria√ß√£o de uma nova sess√£o
        verificarSessaoLocal(schoolId, socket);
    });

    socket.on('upload-session', async ({ sessionId, sessionData }) => {
        if (!sessionId || !sessionData) return;
        console.log(`üì§ Recebido upload de sess√£o para ${sessionId}`);

        // --- IN√çCIO DA CORRE√á√ÉO (Consist√™ncia) ---
        // Garante que qualquer cliente existente seja destru√≠do antes de restaurar a sess√£o
        if (clients[sessionId]) {
            console.log(`üëª Encontrado cliente existente para ${sessionId} antes do upload. Destruindo...`);
            try {
                await clients[sessionId].destroy();
                console.log(`‚úÖ Cliente antigo para ${sessionId} destru√≠do.`);
            } catch (e) {
                console.error(`‚ö†Ô∏è Erro ao destruir cliente antigo para ${sessionId}:`, e.message);
            }
            delete clients[sessionId];
        }
        // --- FIM DA CORRE√á√ÉO ---

        const authPath = getSessionPath(sessionId);
        ensureSessionDir(sessionId);

        // O arquivo de sess√£o precisa ser salvo em um local espec√≠fico que o LocalAuth espera
        const sessionFilePath = path.join(authPath, 'Default', 'session.json');
        fs.mkdirSync(path.dirname(sessionFilePath), { recursive: true });

        try {
            fs.writeFileSync(sessionFilePath, sessionData);
            console.log(`üìÑ Arquivo de sess√£o salvo em: ${sessionFilePath}`);
            iniciarSessao(sessionId, socket); // Inicia a sess√£o com o arquivo restaurado
        } catch (err) {
            console.error(`‚ùå Erro ao restaurar sess√£o ${sessionId}:`, err);
            socket.emit('disconnected');
        }
    });

    socket.on('disconnect', () => {
        console.log('üîå Socket desconectado:', socket.id);
        // A l√≥gica de limpeza agora √© tratada de forma mais robusta no in√≠cio de uma nova conex√£o,
        // o que √© mais confi√°vel do que tentar limpar na desconex√£o.
    });
});

// Endpoint para envio de mensagens
app.post('/enviar-whatsapp', async (req, res) => {
    const { numero, mensagem, schoolId } = req.body;

    if (!numero || !mensagem || !schoolId) {
        return res.status(400).json({ sucesso: false, erro: 'Par√¢metros obrigat√≥rios ausentes.' });
    }

    const client = clients[schoolId];
    if (!client || !verificarConexao(client)) {
        return res.status(500).json({ sucesso: false, erro: 'Cliente do WhatsApp n√£o est√° conectado ou pronto.' });
    }

    try {
        // Formata o n√∫mero para o padr√£o do WhatsApp (ex: 5511999999999@c.us)
        const destinatario = numero.includes('@c.us') ? numero : `${numero}@c.us`;
        await client.sendMessage(destinatario, mensagem);
        res.json({ sucesso: true, mensagem: 'Mensagem enviada com sucesso.' });
        console.log(`üì§ Mensagem enviada para ${numero} (da escola ${schoolId})`);
    } catch (err) {
        console.error('Erro ao enviar mensagem:', err);
        res.status(500).json({ sucesso: false, erro: 'Falha ao enviar mensagem.' });
    }
});

// Inicializa o servidor HTTP
server.listen(PORT, () => {
    console.log(`üöÄ Servidor PedagogIA rodando na porta ${PORT}`);
});
